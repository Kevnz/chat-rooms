{
	// Place your chat-rooms workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Context and provider": {
		"prefix": "context",
		"body": [
			"import React, { createContext, useReducer, useEffect } from 'react'",
			"const initialState = {",
			" ",
			"}",
			"",
			"const reducer = (state, action) => {",
			"  switch (action.type) {",
			"    case '$2':",
			"      return { }",
			"    case '$3':",
			"      return { }",
			"    default:",
			"      return null",
			"  }",
			"}",
			"",
			"export const $1Context = createContext()",
			"",
			"export const $1Provider = ({ children }) => {",
			"",
			"  const hydratedState = initialState",
			"  const [state, dispatch] = useReducer(reducer, hydratedState)",
			"  useEffect(() => {",
			"    ",
			"  }, [state])",
			"",
			"  return (",
			"    <$1Context.Provider value={{ ...state }}>",
			"      {children}",
			"    </$1Context.Provider>",
			"  )",
			"}",
			""
		],
		"description": "Context and provider"
	},
	"NavBarMenu": {
		"prefix": "navbar",
		"body": [
			"<NavBar className=\"has-shadow\" isPrimary>",
			"  <Container>",
			"    <NavBarBrand",
			"      src=\"/$1\"",
			"      alt=\"$2\"",
			"      onClick={e => {",
			"        setMenu(!menu)",
			"      }}",
			"    />",
			"",
			"    <NavBarMenu className={classnames({ 'is-active': menu })}>",
			"      <NavBarEnd className=\"navbar-end\">",
			"        {true && (",
			"          <NavBarDropDown title=\"$3\">",
			"            <NavBarItem>",
			"              <a>$4</a>",
			"            </NavBarItem>",
			"          </NavBarDropDown>",
			"        )}",
			"        {false && (",
			"          <NavBarDropDown title=\"$5\">",
			"            <NavBarItem>",
			"              <a>$6</a>",
			"            </NavBarItem>",
			"          </NavBarDropDown>",
			"        )}",
			"      </NavBarEnd>",
			"    </NavBarMenu>",
			"  </Container>",
			"</NavBar>"
		],
		"description": "NavBarMenu"
	},
	"Elements page": {
		"prefix": "elpage",
		"body": [
			"import React from 'react'",
			"import {",
			"  Container,",
			"  Section,",
			"  Hero,",
			"  HeroBody,",
			"  Title,",
			"  SubTitle,",
			"} from '@brightleaf/elements'",
			"import { useTitle } from '@brightleaf/react-hooks'",
			"export default () => {",
			"  const [pageTitle, setPageTitle] = useTitle('$1')",
			"  return (",
			"    <Container>",
			"      <Hero>",
			"        <HeroBody>",
			"          <Title>$2</Title>",
			"          <SubTitle>$3</SubTitle>",
			"        </HeroBody>",
			"      </Hero>",
			"      <Section>$4</Section>",
			"    </Container>",
			"  )",
			"}",
			""
		],
		"description": "Elements page"
	}
}